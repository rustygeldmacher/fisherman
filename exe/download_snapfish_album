#!/usr/bin/env ruby

require 'fisherman'
require 'fileutils'
require 'getoptlong'

at_exit do
  last_exception = $!
  if last_exception.is_a?(Faraday::ClientError)
    if last_exception.response[:status] == 401
      puts "** Snapfish authentication failed."
      puts "** Please make sure your token is valid and try again"
    end
    exit! 1
  end
end

opts = GetoptLong.new(
  ['--token', '-t', GetoptLong::REQUIRED_ARGUMENT],
  ['--album-id', '-a', GetoptLong::REQUIRED_ARGUMENT]
)

opts.each do |op, value|
  case op
  when '--token'
    @token = value
  when '--album-id'
    @album_id = value
  end
end

if !@token || !@album_id
  puts <<-HELP
** Usage: #{$0} --token <token> --album-id <album-id>
**
** Will download the contents of the album into a directory relative
** to the current directory, and named with the album date plus the
** album name.
  HELP
  exit 1
end

Snapfish.connect(@token)

STDERR.puts "Gathering information about album #{@album_id}"

album = Snapfish::Album.get(@album_id)
if album.nil?
  puts "** Could not find album with ID #{@album_id}"
  exit 1
end

album_directory =  "#{album.created_at.strftime('%Y-%m-%d')} - #{album.name}"
FileUtils.mkdir_p(album_directory)

puts "Downloading album to directory \"#{album_directory}\""
album.assets.each_with_index do |photo, index|
  file_name = index.to_s.rjust(4, '0') + '.' + photo.file_extension
  destination_file = File.join(album_directory, file_name)

  downloader = Snapfish::Downloader.new(photo)
  downloader.download(destination_file)

  # TODO: rename file if it was a thumbnail
  if downloader.bytes > 0
    puts "Wrote #{file_name} (#{downloader.bytes.size} bytes)"
  else
    puts "Could not download photo #{photo.id}"
  end
end
